// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "MoneyForest": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/odiak/MoneyForest/design
// --out=$(GOPATH)/src/github.com/odiak/MoneyForest
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"unicode/utf8"
)

// LoginUserContext provides the user login action context.
type LoginUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Email    *string
	Password *string
}

// NewLoginUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller login action.
func NewLoginUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*LoginUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LoginUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEmail := req.Params["email"]
	if len(paramEmail) > 0 {
		rawEmail := paramEmail[0]
		rctx.Email = &rawEmail
		if rctx.Email != nil {
			if err2 := goa.ValidateFormat(goa.FormatEmail, *rctx.Email); err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFormatError(`email`, *rctx.Email, goa.FormatEmail, err2))
			}
		}
	}
	paramPassword := req.Params["password"]
	if len(paramPassword) > 0 {
		rawPassword := paramPassword[0]
		rctx.Password = &rawPassword
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LoginUserContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LoginUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *LoginUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// RegisterUserContext provides the user register action context.
type RegisterUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *RegisterUserPayload
}

// NewRegisterUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller register action.
func NewRegisterUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*RegisterUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RegisterUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// registerUserPayload is the user register action payload.
type registerUserPayload struct {
	Email    *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Name     *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *registerUserPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *payload.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, *payload.Email, goa.FormatEmail, err2))
		}
	}
	if payload.Name != nil {
		if utf8.RuneCountInString(*payload.Name) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, *payload.Name, utf8.RuneCountInString(*payload.Name), 2, true))
		}
	}
	if payload.Password != nil {
		if utf8.RuneCountInString(*payload.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, *payload.Password, utf8.RuneCountInString(*payload.Password), 8, true))
		}
	}
	return
}

// Publicize creates RegisterUserPayload from registerUserPayload
func (payload *registerUserPayload) Publicize() *RegisterUserPayload {
	var pub RegisterUserPayload
	if payload.Email != nil {
		pub.Email = *payload.Email
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	return &pub
}

// RegisterUserPayload is the user register action payload.
type RegisterUserPayload struct {
	Email    string `form:"email" json:"email" xml:"email"`
	Name     string `form:"name" json:"name" xml:"name"`
	Password string `form:"password" json:"password" xml:"password"`
}

// Validate runs the validation rules defined in the design.
func (payload *RegisterUserPayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, payload.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, payload.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(payload.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, payload.Name, utf8.RuneCountInString(payload.Name), 2, true))
	}
	if utf8.RuneCountInString(payload.Password) < 8 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, payload.Password, utf8.RuneCountInString(payload.Password), 8, true))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *RegisterUserContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RegisterUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *RegisterUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
